import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

# Activation functions
def tanh(x):
    return np.tanh(x)

def tanh_derivative(x):
    return 1 - np.tanh(x) ** 2

def sigmoid(x):
    return 1 / (1 + np.exp(-np.clip(x, -500, 500)))

def sigmoid_derivative(x):
    s = sigmoid(x)
    return s * (1 - s)

# Initialize parameters
def initialize_parameters(n_input, n_hidden, n_output):
    W1 = np.random.randn(n_input, n_hidden) * 0.01
    b1 = np.zeros((1, n_hidden))
    W2 = np.random.randn(n_hidden, n_output) * 0.01
    b2 = np.zeros((1, n_output))
    return W1, b1, W2, b2

# Forward propagation
def forward_propagation(X, W1, b1, W2, b2):
    Z1 = np.dot(X, W1) + b1
    A1 = tanh(Z1)
    Z2 = np.dot(A1, W2) + b2
    A2 = sigmoid(Z2)
    cache = {"Z1": Z1, "A1": A1, "Z2": Z2, "A2": A2}
    return A2, cache

# Compute binary cross-entropy loss
def compute_cost(A2, y):
    m = y.shape[0]
    cost = - (1/m) * np.sum(y * np.log(A2 + 1e-15) + (1 - y) * np.log(1 - A2 + 1e-15))
    return cost

# Backward propagation
def backward_propagation(X, y, cache, W1, W2, b1, b2, learning_rate):
    m = X.shape[0]
    A1, Z1, A2, Z2 = cache["A1"], cache["Z1"], cache["A2"], cache["Z2"]
    
    # Output layer gradients
    dZ2 = A2 - y
    dW2 = (1/m) * np.dot(A1.T, dZ2)
    db2 = (1/m) * np.sum(dZ2, axis=0, keepdims=True)
    
    # Hidden layer gradients
    dA1 = np.dot(dZ2, W2.T)
    dZ1 = dA1 * tanh_derivative(Z1)
    dW1 = (1/m) * np.dot(X.T, dZ1)
    db1 = (1/m) * np.sum(dZ1, axis=0, keepdims=True)
    
    # Update parameters
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2
    
    return W1, b1, W2, b2

# Train the neural network
def train_model(X, y, n_hidden, learning_rate=0.01, num_iterations=1000):
    n_input = X.shape[1]
    n_output = 1
    W1, b1, W2, b2 = initialize_parameters(n_input, n_hidden, n_output)
    costs = []
    
    for i in range(num_iterations):
        # Forward propagation
        A2, cache = forward_propagation(X, W1, b1, W2, b2)
        # Compute cost
        cost = compute_cost(A2, y)
        costs.append(cost)
        # Backward propagation
        W1, b1, W2, b2 = backward_propagation(X, y, cache, W1, W2, b1, b2, learning_rate)
        # Print cost every 100 iterations
        if i % 100 == 0:
            print(f"Iteration {i}, Cost: {cost:.4f}")
    
    return W1, b1, W2, b2, costs

# Predict function
def predict(X, W1, b1, W2, b2):
    A2, _ = forward_propagation(X, W1, b1, W2, b2)
    return (A2 >= 0.5).astype(int)

# Main function
def main():
    # Step 1: Load Breast Cancer dataset
    data = load_breast_cancer()
    X = data.data
    y = data.target.reshape(-1, 1)  # Reshape y to (m, 1)
    
    # Split dataset
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Step 2: Normalize the data
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    
    # Step 3-7: Train the model
    n_hidden = 10  # Number of hidden units
    learning_rate = 0.01
    num_iterations = 1000
    W1, b1, W2, b2, costs = train_model(X_train, y_train, n_hidden, learning_rate, num_iterations)
    
    # Step 8: Evaluate accuracy
    y_pred_train = predict(X_train, W1, b1, W2, b2)
    y_pred_test = predict(X_test, W1, b1, W2, b2)
    
    train_accuracy = accuracy_score(y_train, y_pred_train)
    test_accuracy = accuracy_score(y_test, y_pred_test)
    conf_matrix = confusion_matrix(y_test, y_pred_test)
    
    print(f"\nTrain Accuracy: {train_accuracy:.4f}")
    print(f"Test Accuracy: {test_accuracy:.4f}")
    print("\nConfusion Matrix (Test Set):")
    print(conf_matrix)
    
    # Plot cost over iterations
    plt.plot(costs)
    plt.xlabel("Iterations")
    plt.ylabel("Cost")
    plt.title("Cost vs Iterations")
    plt.show()

if __name__ == "__main__":
    main()
